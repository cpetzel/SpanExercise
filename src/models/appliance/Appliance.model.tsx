import {Model, attr, ModelType, fk, many} from 'redux-orm';

//https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/redux-orm/redux-orm-tests.ts
export interface IAppliance {
  id: number;
  name: string;
}

export class Appliance extends Model<typeof Appliance, IAppliance> {
  static modelName = 'Appliance' as const;

  /*
many, fk and oneToOne field factories take two arguments:
 the related model's modelName and an optional reverse field name. 
 If the reverse field name is not specified,
  it will be autogenerated (the default way to access Todos related
     to a user instance would be user.todoSet)

     the second param...
     means that accessing the todos property of a Tag model instance returns the set of Todo's that have that tag. The value returned by tagInstance.todos is not an array but a QuerySet instance, which enables filtering, ordering, editing and reading operations on a set of entities.
  */

  //https://github.com/tommikaikkonen/redux-orm-primer#how-state-is-managed-for-many-to-many-relations
  static fields = {
    id: attr(),
    name: attr(),
    space: fk('Space', 'appliance'),
  };
}
